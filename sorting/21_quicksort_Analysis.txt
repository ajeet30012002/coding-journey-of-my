void quicksort(int *a,int l,int h)
{
    if(l<h)
    {
        int p=partation(a,l,h);
        quicksort(a,l,p);
        quicksort(a,p+1,h);
    }
}
*** Best case

  ->In  general the whole array is divided into two half the first half has the elements which is saller then the pivot elements and the second half has the elements greater than the pivot elements.

  -------------------------------\\\\\\\\\\\\\\\\\\\\\\*****************************************
  smaller elements                  pivot elements           larger elements

  ->Chose those partation method which has better approach to implements the above array forms

  ->In general the time complexity of the array is O(nlogn)

  ->The recurence relation for the best case are T(n)=2T(n/2) + cn






  *** Worst case

  ->In general the whole array is divided into two half the first has only one elements (1) and the second half has the other elements (n-1)

  ----\\\\\\\\\\\\\\\\\\\\***********************************************************************
  1 elements      pivot elements                 other elements(n-1)
 
 ->In general the time complexity of the array is O(n2)

 ->The recurrence relation of the quicksort is T(n)=T(n-1) + O(n)